<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>老东叔写代码</title>
    <link>https://meepoljd.github.io/</link>
    <description>Recent content on 老东叔写代码</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 27 Jun 2024 21:40:27 +0800</lastBuildDate><atom:link href="https://meepoljd.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prompt工程入门</title>
      <link>https://meepoljd.github.io/posts/prompt%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%97%A8/</link>
      <pubDate>Thu, 27 Jun 2024 21:40:27 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/prompt%E5%B7%A5%E7%A8%8B%E5%85%A5%E9%97%A8/</guid>
      <description>本文主要内容主要来自于吴恩达的《ChatGPT Prompt Engineering for Developers》，并省略了其中的代码内容
概念补全  LLM：  Base LLM：通过大量训练数据，来预测下一句话 Instruction Tune LLM：被训练的可以遵循指令  RLHF：从人类反馈中学习      提供精确的指令 很多时候模型不能正常工作，或者不和预期，是因为指令不够精确导致的。 清晰并不等价于短，有时候长的指令会更加清晰明确
 使用分界符区分指令与数据，并对各个部分进行标注分割，例如“总结反引号包含的内容”，同时这也可以防止指令注入 要求结构化的输出，例如“使用包含如下Key的JSON返回，key1，key2”，清晰美观，程序可以直接处理 使用先验知识，让模型进行前置的条件检查，而不是让他瞎编。例如“如果输入内容不包含xxx，返回xxx” 向模型提供一些正确处理的例子，并要求的执行同样的任务。例如“进行同样风格的回答：xxxxx”  让模型有时间思考 算力问题，我们不希望模型着急回答，而是引导其思考。 本质上来说是因为模型没有办法像人一样快速地推导出求解流程，需要通过提示词工程，将人类思考的逻辑注入进来，来加快求解。
 明确执行步骤，例如“步骤1xxx；步骤2xxxx” 要求模型先自行解答，例如对一个问题，判定答案是否正确。这一条更像是判断类型下的一个执行步骤优化。  模型的局限性 尽管模型接触到了大量的训练数据，但是他并不清楚自己知识的边界是什么。也就是瞎编内容，称Hallucination幻觉。 一个从输入预测输出的机器，可以总是能输出一些内容，哪怕这些内容都是瞎编的。 解决这个问题的思路：首先找到相关信息，并引用他们来回答问题，追溯到参考文献后幻觉少了很多。
如何不断迭代提示词 一次写出要给完美的提示词是不现实的，我们必须学会如何不断地迭代优化现有提示，并最终达成目标。 如何迭代：Idea-&amp;gt;Implementation-&amp;gt;Experimental Result-&amp;gt;Error Analysis-&amp;gt;Idea 如何进行Error Analysis：这里并没有一大套方法论，更像是一个阅读题。你阅读模型的返回，像一个无耻的甲方一样提出修改意见。当然，后面修改的乙方也是你。
四项常用的能力  总结 推理 转换 扩展  Temperature 一个模型的参数，会影响相应的随机性或者说多样性 例如输入我最爱吃的食物，Temperature为0是会选择输出评分最高的答案披萨。 我们提升Temperature后，排序靠后的一些答案也会被输出，这个参数解决答案的“饥饿”问题。 构建可靠可预测的系统时，这个参数应被设置为0
多轮对话的构成 我们每一次提交的message包含如下几个部分
{ &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;你好&amp;#34; } #+end_src&amp;gt; 其中role有三种，分别为system，assistant，user。 user代表用户的输入内容，assistant是模型的输出内容，system用于对assistant进行声明设定，是层次更高程的meta。 那么一段对话可以表示为： #+begin_src json [ { &amp;#34;role&amp;#34;: &amp;#34;system&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;你是一个逗逼&amp;#34; }, { &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;给我讲个笑话&amp;#34; }, { &amp;#34;role&amp;#34;: &amp;#34;assistant&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;从前.</description>
    </item>
    
    <item>
      <title>写一篇博客</title>
      <link>https://meepoljd.github.io/posts/%E5%86%99%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 21 Jun 2024 15:54:49 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/%E5%86%99%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>装修计划</title>
      <link>https://meepoljd.github.io/posts/interior-finish/</link>
      <pubDate>Thu, 21 Mar 2024 09:26:45 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/interior-finish/</guid>
      <description>预算盘点  我们要在这件事上花多少钱，影响后续的流程决策
 决策点  全包 or 半包  流程 选材备忘 排期 杂项问题  楼道拐角是否会影响长板材进场 流程有了，看起来大差不差，主材采购时间点，我们什么时候去买什么 防盗门什么时候进场 有哪些需要跟物业打交道 不能太较真，太较真就觉得哪都是坑 from cz   Ref   干货必看！史上最全装修流程。另附施工秘诀，值得收藏！_家装主材_什么值得买 (smzdm.com)
  教你分清清包、半包、全包三种装修方式 - 知乎 (zhihu.com)
  </description>
    </item>
    
    <item>
      <title>关于aPaaS平台的思考</title>
      <link>https://meepoljd.github.io/posts/what-is-apaas/</link>
      <pubDate>Wed, 20 Mar 2024 19:11:14 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/what-is-apaas/</guid>
      <description>什么是Builder Builder scope划分我的认知里，是从前端视角产生的，基于组件编辑产生DSL，并且解析DSL产出页面。
从一个更中立的视角来看，其实这是两件事，IDE与运行容器。而这两者之间，隐含了一个不被重视的服务端工作，就是DSL的持久化与维护。
产品演进  前身是kunlun 我们是服务B端的，少数大客户的边缘Case也是要处理的，或者说很重要 我们曾经在两个路径里摇摆，服务字节还是搞好商业化 这一年的主题，删繁就简 支持了电商，但又抛弃了电商 6月接客  前端演进   1.0 2.0 3.0
  没法纠结技术细节，前端内容不是很懂，投入研究的ROI太低了。
  技术现状  由于之前一直没有服务端团队，所以所有的资料都是从前端视角来做的。尽快完成一份服务端的梳理与规划文档十分关键
 设计态  核心问题，一个页面有哪些信息来描述，保存在哪里
从PageConfig的存在，可以初步总结Builder的服务端在这里有两个核心职责：
  数据的持久化，未来的协同编辑，增量存储等
  IDE的体验支持（既然叫IDE，有什么是本地解决不了的，我在把自己越做越薄？）
   基于现有的资料：
页面=基本信息+UIDL+Page Config
  基本信息：页面的标题描述等
  UIDL：对页面内容的定义
  Page Config：服务端需要感知的内容，导航信息，权限树，多语言，环境变量等。
  我的问题：
  这个划分逻辑是否合理，Page Config看起来更像是Index，用来辅助IDE运行提示。是否应该影响页面本身的定义与组织
  写入时机是否合理，page config的实时性要求是什么样的。检索UIDL生产page config保存的设计是否合理。
  如果UIDL只能全量保存，就不应当支持并发编辑。进一步的page config的开发辅助功能可以本地进行。为什么要向服务端投递。</description>
    </item>
    
    <item>
      <title>尝试读懂Go ASM</title>
      <link>https://meepoljd.github.io/posts/go-asm/</link>
      <pubDate>Sun, 28 Jan 2024 22:53:59 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/go-asm/</guid>
      <description>问题 某同学在日常工作中写出了一段十分诡异的代码，在CR中产生的激烈讨论。
var a = map[string]string{} func main() { go func() { v := a[&amp;#34;key1&amp;#34;] log.Println(v) }() go func() { b := make(map[string]string) a = b }() } 显然，在工作中写出这种有明显争议的代码是十分不好的，但如何证明这段代码确实不会panic也确实是个问题。
思路 与其研究各种语法特性，不如借机研究一下Go的汇编，通过更底层的行为描述确认运行时的行为。
验证 以下代码解释参考了GPT的结果，AI改变世界~
Go汇编引入了4个伪寄存器，这4个寄存器时编译器用来维护上下文、特殊标识等作用的
  FP(Frame pointer):记录栈帧的初始地址，用于访问函数的参数与局部变量
  PC(Program counter):记录当前正在执行的指令，控制执行流程
  SB(Static base pointer):SB指向了可执行程序的数据段的开始。用于访问全局变量和函数地址。
  SP(Stack pointer):栈顶，用于管理调用栈
  首先声明一个main方法
0x0000 00000 (main.go:5) TEXT main.main(SB), ABIInternal, $32-0 // TEXT 包名.方法名(SB 这是基于静态地址的数据), ABIInternal, $栈帧大小-参数及返回值大小 栈帧大小如何计算
PCDATA $0, $-2 CMP R16, RSP BLS 60 // Branch if Lower or Same PCDATA $0, $-1 一段费解的代码，由于CMP命令会产生标志位变化，但不会计算得到一个值，为了垃圾回收器和其他运行时组件能够正确地解释生成的代码，使用PCDATA命令插入一个标记。</description>
    </item>
    
    <item>
      <title>使用Hugo快速搭建一个免费的静态博客</title>
      <link>https://meepoljd.github.io/posts/how-to-build-personal-website/</link>
      <pubDate>Tue, 23 Jan 2024 20:52:53 +0800</pubDate>
      
      <guid>https://meepoljd.github.io/posts/how-to-build-personal-website/</guid>
      <description>为了方便迁移，不被各种笔记软件绑架，所以最近将笔记内容都迁移到一个Markdown仓库进行管理。顺便的使用Hugo将这些笔记搭建一个个人博客。
本文用于记录搭建过程中的一些操作，面向有开发基础的同学，不会再讲解什么是Git。
 环境搭建   Git
  一个顺手的编辑器（为什么不试试Emacs呢）
hugo 安装Hugo，Mac用户可以直接
brew install hugo 为了方便使用，在创建站点时加入--format yaml，来指定配置文件的格式
hugo new site MyWebsite --format yaml Hugo 会在目录查找一个 config.toml 的配置文件。如果这个文件不存在，将会查找 config.yaml，然后是 config.json 。
主题配置 审美问题，实在不知道选什么，所以选择了一个人气较高的主题PaperMod。参考官方文档来进行安装。
  Hugo的主题被存放在 MyWebsite/themes 目录下，可使用git clone 将代码拉下来
git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 在 config.yml 加入如下的内容来指定使用的主题
theme: [&amp;quot;PaperMod&amp;quot;] 文章模板 hugo的模板文件位于archetypes文件夹中，其中有一个default.md文件，修改内容如下
---title:&amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34;&amp;#34; | title }}&amp;#34;date:{{.Date }}lastmod:{{.Date }}author:[&amp;#34;jiandong.liu93&amp;#34;]categories:- category 1- category 2tags:- tag 1- tag 2keywords:- word 1- word 2description:&amp;#34;&amp;#34;# 文章描述，与搜索优化相关summary:&amp;#34;&amp;#34;# 文章简单描述，会展示在主页weight:# 输入1可以顶置文章，用来给文章展示排序，不填就默认按时间排序slug:&amp;#34;&amp;#34;draft:true# 是否为草稿comments:falseshowToc:true# 显示目录TocOpen:true# 自动展开目录autonumbering:true# 目录自动编号hidemeta:false# 是否隐藏文章的元信息，如发布日期、作者等disableShare:true# 底部不显示分享栏searchHidden:true# 该页面可以被搜索到showbreadcrumbs:true#顶部显示当前路径mermaid:truecover:image:&amp;#34;&amp;#34;caption:&amp;#34;&amp;#34;alt:&amp;#34;&amp;#34;relative:false---自定义 为网站进行一些个性化的配置，比如上几个要饭的二维码。可以使用主题官方提供的配置文件模板。</description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://meepoljd.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meepoljd.github.io/archives/</guid>
      <description>archives</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://meepoljd.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://meepoljd.github.io/search/</guid>
      <description>search</description>
    </item>
    
  </channel>
</rss>
